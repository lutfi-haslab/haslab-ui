/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './app/__root'
import { Route as DashboardRouteRouteImport } from './app/dashboard/route'
import { Route as AuthRouteRouteImport } from './app/auth/route'
import { Route as IndexRouteImport } from './app/index'
import { Route as DashboardIndexRouteImport } from './app/dashboard/index'
import { Route as DashboardTablesIndexRouteImport } from './app/dashboard/tables/index'
import { Route as DashboardSettingsIndexRouteImport } from './app/dashboard/settings/index'
import { Route as DashboardExamplesIndexRouteImport } from './app/dashboard/examples/index'
import { Route as DashboardAnalyticsIndexRouteImport } from './app/dashboard/analytics/index'
import { Route as AuthSignUpIndexRouteImport } from './app/auth/sign-up/index'
import { Route as AuthSignInIndexRouteImport } from './app/auth/sign-in/index'

const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardTablesIndexRoute = DashboardTablesIndexRouteImport.update({
  id: '/tables/',
  path: '/tables/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardSettingsIndexRoute = DashboardSettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardExamplesIndexRoute = DashboardExamplesIndexRouteImport.update({
  id: '/examples/',
  path: '/examples/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardAnalyticsIndexRoute = DashboardAnalyticsIndexRouteImport.update({
  id: '/analytics/',
  path: '/analytics/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const AuthSignUpIndexRoute = AuthSignUpIndexRouteImport.update({
  id: '/sign-up/',
  path: '/sign-up/',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthSignInIndexRoute = AuthSignInIndexRouteImport.update({
  id: '/sign-in/',
  path: '/sign-in/',
  getParentRoute: () => AuthRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/': typeof DashboardIndexRoute
  '/auth/sign-in': typeof AuthSignInIndexRoute
  '/auth/sign-up': typeof AuthSignUpIndexRoute
  '/dashboard/analytics': typeof DashboardAnalyticsIndexRoute
  '/dashboard/examples': typeof DashboardExamplesIndexRoute
  '/dashboard/settings': typeof DashboardSettingsIndexRoute
  '/dashboard/tables': typeof DashboardTablesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/dashboard': typeof DashboardIndexRoute
  '/auth/sign-in': typeof AuthSignInIndexRoute
  '/auth/sign-up': typeof AuthSignUpIndexRoute
  '/dashboard/analytics': typeof DashboardAnalyticsIndexRoute
  '/dashboard/examples': typeof DashboardExamplesIndexRoute
  '/dashboard/settings': typeof DashboardSettingsIndexRoute
  '/dashboard/tables': typeof DashboardTablesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/': typeof DashboardIndexRoute
  '/auth/sign-in/': typeof AuthSignInIndexRoute
  '/auth/sign-up/': typeof AuthSignUpIndexRoute
  '/dashboard/analytics/': typeof DashboardAnalyticsIndexRoute
  '/dashboard/examples/': typeof DashboardExamplesIndexRoute
  '/dashboard/settings/': typeof DashboardSettingsIndexRoute
  '/dashboard/tables/': typeof DashboardTablesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/dashboard'
    | '/dashboard/'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/dashboard/analytics'
    | '/dashboard/examples'
    | '/dashboard/settings'
    | '/dashboard/tables'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/dashboard'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/dashboard/analytics'
    | '/dashboard/examples'
    | '/dashboard/settings'
    | '/dashboard/tables'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/dashboard'
    | '/dashboard/'
    | '/auth/sign-in/'
    | '/auth/sign-up/'
    | '/dashboard/analytics/'
    | '/dashboard/examples/'
    | '/dashboard/settings/'
    | '/dashboard/tables/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/tables/': {
      id: '/dashboard/tables/'
      path: '/tables'
      fullPath: '/dashboard/tables'
      preLoaderRoute: typeof DashboardTablesIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/settings/': {
      id: '/dashboard/settings/'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/examples/': {
      id: '/dashboard/examples/'
      path: '/examples'
      fullPath: '/dashboard/examples'
      preLoaderRoute: typeof DashboardExamplesIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/analytics/': {
      id: '/dashboard/analytics/'
      path: '/analytics'
      fullPath: '/dashboard/analytics'
      preLoaderRoute: typeof DashboardAnalyticsIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/auth/sign-up/': {
      id: '/auth/sign-up/'
      path: '/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpIndexRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/sign-in/': {
      id: '/auth/sign-in/'
      path: '/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInIndexRouteImport
      parentRoute: typeof AuthRouteRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthSignInIndexRoute: typeof AuthSignInIndexRoute
  AuthSignUpIndexRoute: typeof AuthSignUpIndexRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthSignInIndexRoute: AuthSignInIndexRoute,
  AuthSignUpIndexRoute: AuthSignUpIndexRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface DashboardRouteRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardAnalyticsIndexRoute: typeof DashboardAnalyticsIndexRoute
  DashboardExamplesIndexRoute: typeof DashboardExamplesIndexRoute
  DashboardSettingsIndexRoute: typeof DashboardSettingsIndexRoute
  DashboardTablesIndexRoute: typeof DashboardTablesIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardAnalyticsIndexRoute: DashboardAnalyticsIndexRoute,
  DashboardExamplesIndexRoute: DashboardExamplesIndexRoute,
  DashboardSettingsIndexRoute: DashboardSettingsIndexRoute,
  DashboardTablesIndexRoute: DashboardTablesIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
